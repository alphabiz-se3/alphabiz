name: CI/CT/CD test and nightly release
# env:
#   name: staging_environment

# concurrency: staging_environment

on:
  schedule:
    - cron: "50 10 * * *"
  pull_request:
  push:
    paths:
      - "**.js"
      - "**/release-nightly.yml"
      - "!patches/**"
      - "!public/**"
      - "!wix/**"
      - "!snapcraft/**"
      - "!developer/**"
      - "!build-scripts/**"
      - "!test/**"
      - "dist/**"
      - "release.json"
    branches: [main, test-codesign]

jobs:
  nightly_job:
    runs-on: ${{ matrix.os }}
    if: |
      !contains(github.event.head_commit.message , 'skip workflow') && !contains(github.event.head_commit.message , 'Merge branch')
    outputs:
      tag-name: ${{ steps.unify.outputs.tag-name }}
      release-name: ${{ steps.unify.outputs.release-name }}
      package-name: ${{ steps.unify.outputs.package-name }}
      isRunAppium: ${{ steps.check.outputs.isRunAppium }}
      isBuildUniversal: ${{ steps.check.outputs.isBuildUniversal }}
      isModifyReleaseJson: ${{ steps.unify.outputs.isModifyReleaseJson }}
      repository: ${{ steps.check.outputs.repository }}
      display-name: ${{ steps.slug.outputs.display-name }}
      file-name-lower: ${{ steps.slug.outputs.file-name-lower }}
    strategy:
      matrix:
        os: [macos-latest]
        node-version: [16]
      fail-fast: false
    environment:
      name: CICD
    env:
      NODE_AUTH_TOKEN: ${{ secrets.PAT }}
      GITHUB_PAT: ${{ secrets.PAT }}
      GOOGLE_EMAIL_USERNAME: ${{ secrets.GOOGLE_EMAIL_USERNAME }}
      GOOGLE_EMAIL_PASSWORD: ${{ secrets.GOOGLE_EMAIL_PASSWORD }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      PHONE_NUMBER_ACCOUNT: ${{ secrets.PHONE_NUMBER_ACCOUNT }}
      PHONE_NUMBER_TOKEN: ${{ secrets.PHONE_NUMBER_TOKEN }}
      TEST_EMAIL_DOMAIN: ${{ secrets.TEST_EMAIL_DOMAIN }}
      TEST1_EMAIL: ${{ secrets.TEST1_EMAIL }}
      TEST2_EMAIL: ${{ secrets.TEST2_EMAIL }}
      TEST3_EMAIL: ${{ secrets.TEST3_EMAIL }}
      TEST1_PHONE_NUMBER: ${{ secrets.TEST1_PHONE_NUMBER }}
      TEST2_PHONE_NUMBER: ${{ secrets.TEST2_PHONE_NUMBER }}
      TEST3_PHONE_NUMBER: ${{ secrets.TEST3_PHONE_NUMBER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_RESET_PASSWORD: ${{ secrets.TEST_RESET_PASSWORD }}
      OAUTH_ACCOUNT_PASSWORD: ${{ secrets.OAUTH_ACCOUNT_PASSWORD }}
      TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
      TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
      TWITTER_ACCESS_TOKEN_KEY: ${{ secrets.TWITTER_ACCESS_TOKEN_KEY }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      APPLE_NOTARY_PASSWORD: ${{ secrets.APPLE_NOTARY_PASSWORD }}
    steps:
      - name: Get short SHA üîë
        id: sha
        run: |
          echo "sha7=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Checkout ${{ steps.sha.outputs.sha7 }} ‚¨áÔ∏è
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      - name: Get app name
        id: slug
        run: |
          DISPLAYNAME=$(cat developer/app.js | perl -wnE"say for /(?<=displayName\:\s)\'?.*\'?(?=,)/gm")
          APPNAME=$(cat developer/app.js | perl -wnE"say for /(?<=const\sAPP\s=\s\')[a-zA-Z]+/gm")
          FILENAME=$(cat developer/app.js | perl -wnE"say for /(?<=fileName\:\s)\'?.*\'?(?=,)/gm")
          echo ${APPNAME}
          echo ${DISPLAYNAME}
          echo ${FILENAME}
          echo "app-name=${APPNAME}" >> $GITHUB_OUTPUT
          echo "app-name-lower=$(echo ${APPNAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          if [[ ${DISPLAYNAME} = "APP" ]] ; \
          then  echo "display-name=${APPNAME}" >> $GITHUB_OUTPUT ; \
            echo "display-name-lower=$(echo ${APPNAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT ; \
          else  DISPLAYNAME=$(echo ${DISPLAYNAME} | sed "s/'//g") ; \
            echo "display-name=${DISPLAYNAME}" >> $GITHUB_OUTPUT ; \
            echo "display-name-lower=$(echo ${DISPLAYNAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT ; \
          fi
          if [[ ${FILENAME} = "APP" ]] ; \
          then  echo "file-name=${APPNAME}" >> $GITHUB_OUTPUT ; \
            echo "file-name-lower=$(echo ${APPNAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT ; \
          else  FILENAME=$(echo ${FILENAME} | sed "s/'//g") ; \
            echo "file-name=${FILENAME}" >> $GITHUB_OUTPUT ; \
            echo "file-name-lower=$(echo ${FILENAME} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT ; \
          fi
        shell: bash

      - name: Setup Node.js ${{ matrix.node-version }} üìÆ
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          registry-url: "https://npm.pkg.github.com"
          scope: "@zeeis"

      - name: Get message
        id: vars
        run: |
          echo "date=$(TZ=UTC-8 git log -1 --date=format-local:"%Y%m%d%H%M" --format="%cd")" >> $GITHUB_OUTPUT
          echo "event-name=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "download-tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          if [[ ${{ matrix.os }} = "ubuntu-latest" ]] ; \
          then echo "system=ubuntu" >> $GITHUB_OUTPUT ; \
            echo "package=${{ steps.slug.outputs.display-name }}-linux-x64" >> $GITHUB_OUTPUT ; \
          elif [[ ${{ matrix.os }} = "macos-latest" ]] ; \
          then echo "system=macos" >> $GITHUB_OUTPUT ; \
            echo "package=${{ steps.slug.outputs.display-name }}-darwin-x64" >> $GITHUB_OUTPUT ; \
          elif [[ ${{ matrix.os }} = "windows-latest" ]] ; \
          then echo "system=windows" >> $GITHUB_OUTPUT ; \
            echo "package=${{ steps.slug.outputs.display-name }}-win32-x64" >> $GITHUB_OUTPUT ; \
          fi
          export COMMIT_HEAD=$(git log -1 --pretty=%B | perl -wnE'say for /^\w+/gm')
          if [[ "$COMMIT_HEAD" = "Merge" ]] ; \
          then export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only -2) ; \
          else export MODIFIED_FILE_LIST=$(git show --pretty="format:" --name-only) ; \
          fi
          echo "MODIFIED_FILE_LIST<<EOF" >> $GITHUB_ENV
          echo "$MODIFIED_FILE_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: Get release.json property
        id: release
        run: |
          CONTENT=$(cat ./release.json)
          TARGET_TAG_NAME=$(echo "$CONTENT" | perl -wnE"say for /(?<=targetTagName\"\:\s\").*(?=\",)/gm")
          NEW_TAG_NAME=$(echo "$CONTENT" | perl -wnE"say for /(?<=newTagName\"\:\s\").*(?=\")/gm")
          echo "target-tag-name=${TARGET_TAG_NAME}"
          echo "new-tag-name=${NEW_TAG_NAME}"
          echo "target-tag-name=${TARGET_TAG_NAME}" >> $GITHUB_OUTPUT
          echo "new-tag-name=${NEW_TAG_NAME}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get package.json version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "package.json"
          prop_path: "version"

      - name: Checkout release.json target tag
        id: checkout
        if: contains(env.MODIFIED_FILE_LIST, 'release.json')
        run: |
          git checkout ${{ steps.release.outputs.target-tag-name }}
          git show --name-only
        shell: bash

      - name: Get unpackaged/version.json property
        id: unpackaged
        run: |
          CONTENT=$(cat ./dist/electron/UnPackaged/version.json)
          PACKAGE_VERSION=$(echo "$CONTENT" | perl -wnE"say for /(?<=packageVer\"\:\s\").*(?=\")/gm")
          echo "package-version=${PACKAGE_VERSION}"
          echo "package-version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      # stable version x.y.z+1
      - name: Get UnstableVersion
        id: unstable
        run: |
          echo "unstable-version=$(echo ${{ steps.unpackaged.outputs.package-version }} | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{$NF=sprintf("%0*d", length($NF), ($NF+1)); print}')" >> $GITHUB_OUTPUT
        shell: bash

      # after git checkout
      - name: Get last commit date \ today all commit message
        if: contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')
        id: nightly
        run: |
          echo "commit-sha7=$(git log -1 --pretty=%B --author="Alphabiz-Team" | perl -wnE'say for /(?<=-)\w{7,8}(?=\s)|^\w{7,8}(?=\s)/g')" >> $GITHUB_OUTPUT
          export DESCRIBE=$(cat github-describe/github-describe.txt)
          echo "$DESCRIBE"
          echo "DESCRIBE<<EOF" >> $GITHUB_ENV
          echo "$DESCRIBE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      # This step for unify the tag name
      # nightly-release use tag_name: $packageJsonVersion-internal/nightly-$dateTime-$commitId
      # official-release use tag_name: ./release.json property newTagName
      - name: Unified Tag format
        id: unify
        run: |
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then echo "tag-name=${{ steps.release.outputs.new-tag-name }}" >> $GITHUB_OUTPUT ; \
            echo "isModifyReleaseJson=1" >> $GITHUB_OUTPUT ; \
            if ${{ contains(steps.release.outputs.new-tag-name, 'nightly') }} ; \
            then echo "release-name=${{ steps.release.outputs.new-tag-name }}-${{ steps.nightly.outputs.commit-sha7 }}" >> $GITHUB_OUTPUT ; \
            else echo "release-name=${{ steps.release.outputs.new-tag-name }}-${{ steps.nightly.outputs.commit-sha7 }}" >> $GITHUB_OUTPUT ; \
            fi
            echo "package-name=${{ steps.release.outputs.new-tag-name }}" >> $GITHUB_OUTPUT ; \
          else echo "tag-name=${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.vars.outputs.date }}" >> $GITHUB_OUTPUT ; \
            echo "release-name=${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.vars.outputs.date }}-${{ steps.nightly.outputs.commit-sha7 }}" >> $GITHUB_OUTPUT ;  \
            echo "package-name=${{ steps.unstable.outputs.unstable-version }}-nightly-${{ steps.vars.outputs.date }}" >> $GITHUB_OUTPUT ; \
            echo "isModifyReleaseJson=0" >> $GITHUB_OUTPUT ; \
          fi
        shell: bash

      # this step checkout all output
      - name: Checkout vars-date ${{ steps.vars.outputs.date }} ‚¨áÔ∏è
        id: check
        run: |
          echo "isBuildUniversal=0" >> $GITHUB_OUTPUT
          echo "repo-name: ${{ github.repository }}"
          echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "slug----------------------"
          echo "app-name: ${{ steps.slug.outputs.app-name }}"
          echo "app-name-lower: ${{ steps.slug.outputs.app-name-lower }}"
          echo "display-name: ${{ steps.slug.outputs.display-name }}"
          echo "display-name-lower: ${{ steps.slug.outputs.display-name-lower }}"
          echo "file-name: ${{ steps.slug.outputs.file-name }}"
          echo "file-name-lower: ${{ steps.slug.outputs.file-name-lower }}"
          echo "vars----------------------"
          echo "run workflow date: ${{ steps.vars.outputs.date }}"
          echo "event_name: ${{ steps.vars.outputs.event-name }}"
          echo "download-tag: ${{ steps.vars.outputs.download-tag }}"
          echo "event.head_commit.message: ${{ github.event.head_commit.message }}"
          echo "system: ${{ steps.vars.outputs.system }}"
          echo "package: ${{ steps.vars.outputs.package }}"
          echo "release----------------------"
          echo "target-tag-name: ${{ steps.release.outputs.target-tag-name }}"
          echo "new-tag-name: ${{ steps.release.outputs.new-tag-name }}"
          echo "version----------------------"
          echo "package.json version: ${{ steps.version.outputs.prop }}"
          echo "unpackaged----------------------"
          echo "unpackage.version: ${{ steps.unpackaged.outputs.package-version }}"
          echo "unstable----------------------"
          echo "unstable-version: ${{ steps.unstable.outputs.unstable-version }}"
          echo "----------------------"
          echo "MODIFIED_FILE_LIST: ${{ env.MODIFIED_FILE_LIST }}"
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then echo "isRunAppium=1" >> $GITHUB_OUTPUT ; \
          else echo "isRunAppium=0" >> $GITHUB_OUTPUT ; \
          fi
          echo "unify----------------------"
          echo "tag-name: ${{ steps.unify.outputs.tag-name }}"
          echo "release-name: ${{ steps.unify.outputs.release-name }}"
          echo "package-name: ${{ steps.unify.outputs.package-name }}"
          echo "nightly----------------------"
          echo "commit-sha7: ${{ steps.nightly.outputs.commit-sha7 }}"
        shell: bash

      - name: Install dependencies üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn
          on_retry_command: rm -rf C:/Users/runneradmin/AppData/Local/node-gyp/

      - name: Install UnPackaged üë®üèª‚Äçüíª
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 2
          shell: bash
          retry_on: error
          command: yarn unpackaged
          on_retry_command: rm -rf C:/Users/runneradmin/AppData/Local/node-gyp/

      - name: Run electron-packager üì¶
        env:
          BUILD_ARCH: x64
        run: |
          if ${{ contains(env.MODIFIED_FILE_LIST, 'release.json') }} ; \
          then if ${{ contains(steps.release.outputs.new-tag-name, 'nightly') }} ; \
            then yarn node update-version.js --newTag ${{ steps.unify.outputs.tag-name }} --SHA7 ${{ steps.sha.outputs.sha7 }} --buildTime ${{ steps.vars.outputs.date }} ; \
            else yarn node update-version.js --newTag ${{ steps.unify.outputs.tag-name }} --SHA7 ${{ steps.sha.outputs.sha7 }} --buildTime ${{ steps.vars.outputs.date }} --stable; \
            fi
          else yarn node update-version.js --buildTime ${{ steps.vars.outputs.date }} ; \
          fi
          yarn packager
        shell: bash

      - name: Pack app üì¶
        if: matrix.os == 'macos-latest'
        run: |
          yarn make
        shell: bash

      - name: Setup coreutils
        run: brew install coreutils
      - name: Create And Sign Pkg
        if: matrix.os == 'macos-latest' && ${{ env.APPLE_NOTARY_PASSWORD }}
        env:
          CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
          CERT_PASS: ${{ secrets.APPLE_CERT_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_DISTRIBUTION_KEY: "Mac Developer ID Application"
          APPLE_INSTALLER_KEY: "Mac Developer ID Installer"
          VERSION: ${{ steps.unify.outputs.tag-name }}
          BUILD_VERSION: ${{ steps.unify.outputs.tag-name }}
          PLATFORM: darwin
          BUILD_PLATFORM: darwin
          APP: "${{ steps.slug.outputs.display-name }}"
        run: |
          # Setup

          SIGN_APP="./out/${{ env.APP }}-darwin-x64/${{ env.APP }}.app"
          # Throw error if file does not exist
          if [ ! -e "$SIGN_APP" ]; then
            echo "$SIGN_APP does not exist!"
            exit 5
          fi
          SIGN_FILE="out/installers/${{ steps.unify.outputs.tag-name }}/${{ steps.unify.outputs.tag-name }}.pkg"

          # Export certs
          echo "$CERT_DATA" | base64 --decode > /tmp/certs.p12
          echo "exported certs.p12 to /tmp/certs.p12"

          # Create keychain
          security create-keychain -p actions macos-build.keychain
          security default-keychain -s macos-build.keychain
          security unlock-keychain -p actions macos-build.keychain
          security set-keychain-settings -t 3600 -u macos-build.keychain

          # Import certs to keychain
          security import /tmp/certs.p12 -k ~/Library/Keychains/macos-build.keychain -P "$CERT_PASS" -T /usr/bin/codesign -T /usr/bin/productsign
          echo "imported certs"

          # Key signing
          security set-key-partition-list -S apple-tool:,apple: -s -k actions macos-build.keychain

          # Verify keychain things
          echo "Verifying keychain..."
          security find-identity -v macos-build.keychain | grep "$APPLE_TEAM_ID" | grep "Developer ID Application"
          security find-identity -v macos-build.keychain | grep "$APPLE_TEAM_ID" | grep "Developer ID Installer"
          echo "Keychain verified"

          # Force the codesignature
          echo "Codesigning..."
          # codesign --force -s "$APPLE_TEAM_ID" "$SIGN_APP"
          ./build-scripts/macos/pkg/sign.sh

          # Verify the code signature
          echo "Verifying..."
          codesign -v "$SIGN_APP" --verbose

          echo "Build pkg"
          ./build-scripts/macos/pkg/build.sh
          echo "Check pkg size"
          du -h "$SIGN_FILE"

      - name: Generate shasum files
        run: node build-scripts/common/shasum.js out/installers/${{ steps.unify.outputs.tag-name }}
        shell: bash
        continue-on-error: true # Missing .sha files is still ok

      - name: Package for ${{ steps.vars.outputs.system }}-${{ steps.unify.outputs.tag-name }} Release üóúÔ∏è
        run: 7z a -t7z -mx=9 "./out/installers/${{ steps.unify.outputs.tag-name }}/${{ steps.slug.outputs.file-name-lower }}-${{ steps.unify.outputs.package-name }}-${{ steps.vars.outputs.system }}.7z" "./dist/electron/${{ steps.vars.outputs.package }}"

      - name: Release ${{ steps.slug.outputs.file-name-lower }}-${{ steps.unify.outputs.package-name }}-${{ steps.vars.outputs.system }} to GitHub üì∞
        if: |
          (contains(steps.vars.outputs.event-name, 'schedule') || contains(env.MODIFIED_FILE_LIST, 'release.json')) &&
          (matrix.os != 'macos-latest' || contains(steps.check.outputs.isBuildUniversal, '0'))
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          name: ${{ steps.slug.outputs.file-name-lower }}-${{ steps.unify.outputs.release-name }}
          tag_name: ${{ steps.unify.outputs.tag-name }}
          body: ${{ env.DESCRIBE }}
          files: |
            ./out/installers/${{ steps.unify.outputs.tag-name }}/**

      - name: public describe to Twitter
        if: |
          contains(steps.vars.outputs.event-name, 'schedule') && matrix.os == 'ubuntu-latest'
          && steps.slug.outputs.app-name == 'Alphabiz'
        run: yarn node publicTwitter.js
